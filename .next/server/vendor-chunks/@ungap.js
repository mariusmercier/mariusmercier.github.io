"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ungap";
exports.ids = ["vendor-chunks/@ungap"];
exports.modules = {

/***/ "(rsc)/./node_modules/@ungap/structured-clone/esm/deserialize.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ungap/structured-clone/esm/deserialize.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserialize: () => (/* binding */ deserialize)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@ungap/structured-clone/esm/types.js\");\n\nconst env = typeof self === 'object' ? self : globalThis;\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n  const unpair = index => {\n    if ($.has(index)) return $.get(index);\n    const [type, value] = _[index];\n    switch (type) {\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE:\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.VOID:\n        return as(value, index);\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY:\n        {\n          const arr = as([], index);\n          for (const index of value) arr.push(unpair(index));\n          return arr;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT:\n        {\n          const object = as({}, index);\n          for (const [key, index] of value) object[unpair(key)] = unpair(index);\n          return object;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.DATE:\n        return as(new Date(value), index);\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.REGEXP:\n        {\n          const {\n            source,\n            flags\n          } = value;\n          return as(new RegExp(source, flags), index);\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.MAP:\n        {\n          const map = as(new Map(), index);\n          for (const [key, index] of value) map.set(unpair(key), unpair(index));\n          return map;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.SET:\n        {\n          const set = as(new Set(), index);\n          for (const index of value) set.add(unpair(index));\n          return set;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.ERROR:\n        {\n          const {\n            name,\n            message\n          } = value;\n          return as(new env[name](message), index);\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView':\n        {\n          const {\n            buffer\n          } = new Uint8Array(value);\n          return as(new DataView(buffer), value);\n        }\n    }\n    return as(new env[type](value), index);\n  };\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nconst deserialize = serialized => deserializer(new Map(), serialized)(0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL2Rlc2VyaWFsaXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBS29CO0FBRXBCLE1BQU1VLEdBQUcsR0FBRyxPQUFPQyxJQUFJLEtBQUssUUFBUSxHQUFHQSxJQUFJLEdBQUdDLFVBQVU7QUFFeEQsTUFBTUMsWUFBWSxHQUFHQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsS0FBSztFQUM3QixNQUFNQyxFQUFFLEdBQUdBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxLQUFLO0lBQ3pCSixDQUFDLENBQUNLLEdBQUcsQ0FBQ0QsS0FBSyxFQUFFRCxHQUFHLENBQUM7SUFDakIsT0FBT0EsR0FBRztFQUNaLENBQUM7RUFFRCxNQUFNRyxNQUFNLEdBQUdGLEtBQUssSUFBSTtJQUN0QixJQUFJSixDQUFDLENBQUNPLEdBQUcsQ0FBQ0gsS0FBSyxDQUFDLEVBQ2QsT0FBT0osQ0FBQyxDQUFDUSxHQUFHLENBQUNKLEtBQUssQ0FBQztJQUVyQixNQUFNLENBQUNLLElBQUksRUFBRUMsS0FBSyxDQUFDLEdBQUdULENBQUMsQ0FBQ0csS0FBSyxDQUFDO0lBQzlCLFFBQVFLLElBQUk7TUFDVixLQUFLdEIsZ0RBQVM7TUFDZCxLQUFLRCwyQ0FBSTtRQUNQLE9BQU9nQixFQUFFLENBQUNRLEtBQUssRUFBRU4sS0FBSyxDQUFDO01BQ3pCLEtBQUtoQiw0Q0FBSztRQUFFO1VBQ1YsTUFBTXVCLEdBQUcsR0FBR1QsRUFBRSxDQUFDLEVBQUUsRUFBRUUsS0FBSyxDQUFDO1VBQ3pCLEtBQUssTUFBTUEsS0FBSyxJQUFJTSxLQUFLLEVBQ3ZCQyxHQUFHLENBQUNDLElBQUksQ0FBQ04sTUFBTSxDQUFDRixLQUFLLENBQUMsQ0FBQztVQUN6QixPQUFPTyxHQUFHO1FBQ1o7TUFDQSxLQUFLdEIsNkNBQU07UUFBRTtVQUNYLE1BQU13QixNQUFNLEdBQUdYLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRUUsS0FBSyxDQUFDO1VBQzVCLEtBQUssTUFBTSxDQUFDVSxHQUFHLEVBQUVWLEtBQUssQ0FBQyxJQUFJTSxLQUFLLEVBQzlCRyxNQUFNLENBQUNQLE1BQU0sQ0FBQ1EsR0FBRyxDQUFDLENBQUMsR0FBR1IsTUFBTSxDQUFDRixLQUFLLENBQUM7VUFDckMsT0FBT1MsTUFBTTtRQUNmO01BQ0EsS0FBS3ZCLDJDQUFJO1FBQ1AsT0FBT1ksRUFBRSxDQUFDLElBQUlhLElBQUksQ0FBQ0wsS0FBSyxDQUFDLEVBQUVOLEtBQUssQ0FBQztNQUNuQyxLQUFLYiw2Q0FBTTtRQUFFO1VBQ1gsTUFBTTtZQUFDeUIsTUFBTTtZQUFFQztVQUFLLENBQUMsR0FBR1AsS0FBSztVQUM3QixPQUFPUixFQUFFLENBQUMsSUFBSWdCLE1BQU0sQ0FBQ0YsTUFBTSxFQUFFQyxLQUFLLENBQUMsRUFBRWIsS0FBSyxDQUFDO1FBQzdDO01BQ0EsS0FBS1osMENBQUc7UUFBRTtVQUNSLE1BQU0yQixHQUFHLEdBQUdqQixFQUFFLENBQUMsSUFBSWtCLEdBQUcsQ0FBRCxDQUFDLEVBQUVoQixLQUFLLENBQUM7VUFDOUIsS0FBSyxNQUFNLENBQUNVLEdBQUcsRUFBRVYsS0FBSyxDQUFDLElBQUlNLEtBQUssRUFDOUJTLEdBQUcsQ0FBQ2QsR0FBRyxDQUFDQyxNQUFNLENBQUNRLEdBQUcsQ0FBQyxFQUFFUixNQUFNLENBQUNGLEtBQUssQ0FBQyxDQUFDO1VBQ3JDLE9BQU9lLEdBQUc7UUFDWjtNQUNBLEtBQUsxQiwwQ0FBRztRQUFFO1VBQ1IsTUFBTVksR0FBRyxHQUFHSCxFQUFFLENBQUMsSUFBSW1CLEdBQUcsQ0FBRCxDQUFDLEVBQUVqQixLQUFLLENBQUM7VUFDOUIsS0FBSyxNQUFNQSxLQUFLLElBQUlNLEtBQUssRUFDdkJMLEdBQUcsQ0FBQ2lCLEdBQUcsQ0FBQ2hCLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUM7VUFDeEIsT0FBT0MsR0FBRztRQUNaO01BQ0EsS0FBS1gsNENBQUs7UUFBRTtVQUNWLE1BQU07WUFBQzZCLElBQUk7WUFBRUM7VUFBTyxDQUFDLEdBQUdkLEtBQUs7VUFDN0IsT0FBT1IsRUFBRSxDQUFDLElBQUlOLEdBQUcsQ0FBQzJCLElBQUksQ0FBQyxDQUFDQyxPQUFPLENBQUMsRUFBRXBCLEtBQUssQ0FBQztRQUMxQztNQUNBLEtBQUtULDZDQUFNO1FBQ1QsT0FBT08sRUFBRSxDQUFDdUIsTUFBTSxDQUFDZixLQUFLLENBQUMsRUFBRU4sS0FBSyxDQUFDO01BQ2pDLEtBQUssUUFBUTtRQUNYLE9BQU9GLEVBQUUsQ0FBQ3dCLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDZixLQUFLLENBQUMsQ0FBQyxFQUFFTixLQUFLLENBQUM7TUFDekMsS0FBSyxhQUFhO1FBQ2hCLE9BQU9GLEVBQUUsQ0FBQyxJQUFJeUIsVUFBVSxDQUFDakIsS0FBSyxDQUFDLENBQUNrQixNQUFNLEVBQUVsQixLQUFLLENBQUM7TUFDaEQsS0FBSyxVQUFVO1FBQUU7VUFDZixNQUFNO1lBQUVrQjtVQUFPLENBQUMsR0FBRyxJQUFJRCxVQUFVLENBQUNqQixLQUFLLENBQUM7VUFDeEMsT0FBT1IsRUFBRSxDQUFDLElBQUkyQixRQUFRLENBQUNELE1BQU0sQ0FBQyxFQUFFbEIsS0FBSyxDQUFDO1FBQ3hDO0lBQ0Y7SUFDQSxPQUFPUixFQUFFLENBQUMsSUFBSU4sR0FBRyxDQUFDYSxJQUFJLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLEVBQUVOLEtBQUssQ0FBQztFQUN4QyxDQUFDO0VBRUQsT0FBT0UsTUFBTTtBQUNmLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNd0IsV0FBVyxHQUFHQyxVQUFVLElBQUloQyxZQUFZLENBQUMsSUFBSXFCLEdBQUcsQ0FBRCxDQUFDLEVBQUVXLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxYeEdvb1xccGVyc29uYWwtc2l0ZVxcbm9kZV9tb2R1bGVzXFxAdW5nYXBcXHN0cnVjdHVyZWQtY2xvbmVcXGVzbVxcZGVzZXJpYWxpemUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVk9JRCwgUFJJTUlUSVZFLFxuICBBUlJBWSwgT0JKRUNULFxuICBEQVRFLCBSRUdFWFAsIE1BUCwgU0VULFxuICBFUlJPUiwgQklHSU5UXG59IGZyb20gJy4vdHlwZXMuanMnO1xuXG5jb25zdCBlbnYgPSB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgPyBzZWxmIDogZ2xvYmFsVGhpcztcblxuY29uc3QgZGVzZXJpYWxpemVyID0gKCQsIF8pID0+IHtcbiAgY29uc3QgYXMgPSAob3V0LCBpbmRleCkgPT4ge1xuICAgICQuc2V0KGluZGV4LCBvdXQpO1xuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgY29uc3QgdW5wYWlyID0gaW5kZXggPT4ge1xuICAgIGlmICgkLmhhcyhpbmRleCkpXG4gICAgICByZXR1cm4gJC5nZXQoaW5kZXgpO1xuXG4gICAgY29uc3QgW3R5cGUsIHZhbHVlXSA9IF9baW5kZXhdO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBQUklNSVRJVkU6XG4gICAgICBjYXNlIFZPSUQ6XG4gICAgICAgIHJldHVybiBhcyh2YWx1ZSwgaW5kZXgpO1xuICAgICAgY2FzZSBBUlJBWToge1xuICAgICAgICBjb25zdCBhcnIgPSBhcyhbXSwgaW5kZXgpO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHZhbHVlKVxuICAgICAgICAgIGFyci5wdXNoKHVucGFpcihpbmRleCkpO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuICAgICAgY2FzZSBPQkpFQ1Q6IHtcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gYXMoe30sIGluZGV4KTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBpbmRleF0gb2YgdmFsdWUpXG4gICAgICAgICAgb2JqZWN0W3VucGFpcihrZXkpXSA9IHVucGFpcihpbmRleCk7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBjYXNlIERBVEU6XG4gICAgICAgIHJldHVybiBhcyhuZXcgRGF0ZSh2YWx1ZSksIGluZGV4KTtcbiAgICAgIGNhc2UgUkVHRVhQOiB7XG4gICAgICAgIGNvbnN0IHtzb3VyY2UsIGZsYWdzfSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gYXMobmV3IFJlZ0V4cChzb3VyY2UsIGZsYWdzKSwgaW5kZXgpO1xuICAgICAgfVxuICAgICAgY2FzZSBNQVA6IHtcbiAgICAgICAgY29uc3QgbWFwID0gYXMobmV3IE1hcCwgaW5kZXgpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGluZGV4XSBvZiB2YWx1ZSlcbiAgICAgICAgICBtYXAuc2V0KHVucGFpcihrZXkpLCB1bnBhaXIoaW5kZXgpKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIGNhc2UgU0VUOiB7XG4gICAgICAgIGNvbnN0IHNldCA9IGFzKG5ldyBTZXQsIGluZGV4KTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiB2YWx1ZSlcbiAgICAgICAgICBzZXQuYWRkKHVucGFpcihpbmRleCkpO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgICAgfVxuICAgICAgY2FzZSBFUlJPUjoge1xuICAgICAgICBjb25zdCB7bmFtZSwgbWVzc2FnZX0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGFzKG5ldyBlbnZbbmFtZV0obWVzc2FnZSksIGluZGV4KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgQklHSU5UOlxuICAgICAgICByZXR1cm4gYXMoQmlnSW50KHZhbHVlKSwgaW5kZXgpO1xuICAgICAgY2FzZSAnQmlnSW50JzpcbiAgICAgICAgcmV0dXJuIGFzKE9iamVjdChCaWdJbnQodmFsdWUpKSwgaW5kZXgpO1xuICAgICAgY2FzZSAnQXJyYXlCdWZmZXInOlxuICAgICAgICByZXR1cm4gYXMobmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlciwgdmFsdWUpO1xuICAgICAgY2FzZSAnRGF0YVZpZXcnOiB7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyIH0gPSBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBhcyhuZXcgRGF0YVZpZXcoYnVmZmVyKSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXMobmV3IGVudlt0eXBlXSh2YWx1ZSksIGluZGV4KTtcbiAgfTtcblxuICByZXR1cm4gdW5wYWlyO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7QXJyYXk8c3RyaW5nLGFueT59IFJlY29yZCBhIHR5cGUgcmVwcmVzZW50YXRpb25cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBkZXNlcmlhbGl6ZWQgdmFsdWUgZnJvbSBhIHNlcmlhbGl6ZWQgYXJyYXkgb2YgUmVjb3Jkcy5cbiAqIEBwYXJhbSB7UmVjb3JkW119IHNlcmlhbGl6ZWQgYSBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdmFsdWUuXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5leHBvcnQgY29uc3QgZGVzZXJpYWxpemUgPSBzZXJpYWxpemVkID0+IGRlc2VyaWFsaXplcihuZXcgTWFwLCBzZXJpYWxpemVkKSgwKTtcbiJdLCJuYW1lcyI6WyJWT0lEIiwiUFJJTUlUSVZFIiwiQVJSQVkiLCJPQkpFQ1QiLCJEQVRFIiwiUkVHRVhQIiwiTUFQIiwiU0VUIiwiRVJST1IiLCJCSUdJTlQiLCJlbnYiLCJzZWxmIiwiZ2xvYmFsVGhpcyIsImRlc2VyaWFsaXplciIsIiQiLCJfIiwiYXMiLCJvdXQiLCJpbmRleCIsInNldCIsInVucGFpciIsImhhcyIsImdldCIsInR5cGUiLCJ2YWx1ZSIsImFyciIsInB1c2giLCJvYmplY3QiLCJrZXkiLCJEYXRlIiwic291cmNlIiwiZmxhZ3MiLCJSZWdFeHAiLCJtYXAiLCJNYXAiLCJTZXQiLCJhZGQiLCJuYW1lIiwibWVzc2FnZSIsIkJpZ0ludCIsIk9iamVjdCIsIlVpbnQ4QXJyYXkiLCJidWZmZXIiLCJEYXRhVmlldyIsImRlc2VyaWFsaXplIiwic2VyaWFsaXplZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ungap/structured-clone/esm/deserialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ungap/structured-clone/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ungap/structured-clone/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deserialize: () => (/* reexport safe */ _deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize),\n/* harmony export */   serialize: () => (/* reexport safe */ _serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize)\n/* harmony export */ });\n/* harmony import */ var _deserialize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserialize.js */ \"(rsc)/./node_modules/@ungap/structured-clone/esm/deserialize.js\");\n/* harmony import */ var _serialize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serialize.js */ \"(rsc)/./node_modules/@ungap/structured-clone/esm/serialize.js\");\n\n\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof structuredClone === \"function\" ? /* c8 ignore start */\n(any, options) => options && ('json' in options || 'lossy' in options) ? (0,_deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize)((0,_serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize)(any, options)) : structuredClone(any) : (any, options) => (0,_deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize)((0,_serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize)(any, options)));\n/* c8 ignore stop */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDO0FBQ0o7O0FBRXpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsT0FBT0UsZUFBZSxLQUFLLFVBQVUsR0FDbEQ7QUFDQSxDQUFDQyxHQUFHLEVBQUVDLE9BQU8sS0FDWEEsT0FBTyxLQUFLLE1BQU0sSUFBSUEsT0FBTyxJQUFJLE9BQU8sSUFBSUEsT0FBTyxDQUFDLEdBQ2xESiw0REFBVyxDQUFDQyx3REFBUyxDQUFDRSxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLEdBQUdGLGVBQWUsQ0FBQ0MsR0FBRyxDQUM3RCxHQUNELENBQUNBLEdBQUcsRUFBRUMsT0FBTyxLQUFLSiw0REFBVyxDQUFDQyx3REFBUyxDQUFDRSxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLEVBQUM7QUFDdkQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcWHhHb29cXHBlcnNvbmFsLXNpdGVcXG5vZGVfbW9kdWxlc1xcQHVuZ2FwXFxzdHJ1Y3R1cmVkLWNsb25lXFxlc21cXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZGVzZXJpYWxpemV9IGZyb20gJy4vZGVzZXJpYWxpemUuanMnO1xuaW1wb3J0IHtzZXJpYWxpemV9IGZyb20gJy4vc2VyaWFsaXplLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7QXJyYXk8c3RyaW5nLGFueT59IFJlY29yZCBhIHR5cGUgcmVwcmVzZW50YXRpb25cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VyaWFsaXplZCBSZWNvcmRzLlxuICogQHBhcmFtIHthbnl9IGFueSBhIHNlcmlhbGl6YWJsZSB2YWx1ZS5cbiAqIEBwYXJhbSB7e3RyYW5zZmVyPzogYW55W10sIGpzb24/OiBib29sZWFuLCBsb3NzeT86IGJvb2xlYW59P30gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aFxuICogYSB0cmFuc2ZlciBvcHRpb24gKGlnbm9yZWQgd2hlbiBwb2x5ZmlsbGVkKSBhbmQvb3Igbm9uIHN0YW5kYXJkIGZpZWxkcyB0aGF0XG4gKiBmYWxsYmFjayB0byB0aGUgcG9seWZpbGwgaWYgcHJlc2VudC5cbiAqIEByZXR1cm5zIHtSZWNvcmRbXX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIHN0cnVjdHVyZWRDbG9uZSA9PT0gXCJmdW5jdGlvblwiID9cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIChhbnksIG9wdGlvbnMpID0+IChcbiAgICBvcHRpb25zICYmICgnanNvbicgaW4gb3B0aW9ucyB8fCAnbG9zc3knIGluIG9wdGlvbnMpID9cbiAgICAgIGRlc2VyaWFsaXplKHNlcmlhbGl6ZShhbnksIG9wdGlvbnMpKSA6IHN0cnVjdHVyZWRDbG9uZShhbnkpXG4gICkgOlxuICAoYW55LCBvcHRpb25zKSA9PiBkZXNlcmlhbGl6ZShzZXJpYWxpemUoYW55LCBvcHRpb25zKSk7XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbmV4cG9ydCB7ZGVzZXJpYWxpemUsIHNlcmlhbGl6ZX07XG4iXSwibmFtZXMiOlsiZGVzZXJpYWxpemUiLCJzZXJpYWxpemUiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJhbnkiLCJvcHRpb25zIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ungap/structured-clone/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ungap/structured-clone/esm/serialize.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ungap/structured-clone/esm/serialize.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serialize: () => (/* binding */ serialize)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@ungap/structured-clone/esm/types.js\");\n\nconst EMPTY = '';\nconst {\n  toString\n} = {};\nconst {\n  keys\n} = Object;\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value) return [_types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE, type];\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY, EMPTY];\n    case 'Object':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT, EMPTY];\n    case 'Date':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.DATE, EMPTY];\n    case 'RegExp':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.REGEXP, EMPTY];\n    case 'Map':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.MAP, EMPTY];\n    case 'Set':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.SET, EMPTY];\n    case 'DataView':\n      return [_types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY, asString];\n  }\n  if (asString.includes('Array')) return [_types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY, asString];\n  if (asString.includes('Error')) return [_types_js__WEBPACK_IMPORTED_MODULE_0__.ERROR, asString];\n  return [_types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT, asString];\n};\nconst shouldSkip = ([TYPE, type]) => TYPE === _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE && (type === 'function' || type === 'symbol');\nconst serializer = (strict, json, $, _) => {\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n  const pair = value => {\n    if ($.has(value)) return $.get(value);\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.PRIMITIVE:\n        {\n          let entry = value;\n          switch (type) {\n            case 'bigint':\n              TYPE = _types_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT;\n              entry = value.toString();\n              break;\n            case 'function':\n            case 'symbol':\n              if (strict) throw new TypeError('unable to serialize ' + type);\n              entry = null;\n              break;\n            case 'undefined':\n              return as([_types_js__WEBPACK_IMPORTED_MODULE_0__.VOID], value);\n          }\n          return as([TYPE, entry], value);\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY:\n        {\n          if (type) {\n            let spread = value;\n            if (type === 'DataView') {\n              spread = new Uint8Array(value.buffer);\n            } else if (type === 'ArrayBuffer') {\n              spread = new Uint8Array(value);\n            }\n            return as([type, [...spread]], value);\n          }\n          const arr = [];\n          const index = as([TYPE, arr], value);\n          for (const entry of value) arr.push(pair(entry));\n          return index;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.OBJECT:\n        {\n          if (type) {\n            switch (type) {\n              case 'BigInt':\n                return as([type, value.toString()], value);\n              case 'Boolean':\n              case 'Number':\n              case 'String':\n                return as([type, value.valueOf()], value);\n            }\n          }\n          if (json && 'toJSON' in value) return pair(value.toJSON());\n          const entries = [];\n          const index = as([TYPE, entries], value);\n          for (const key of keys(value)) {\n            if (strict || !shouldSkip(typeOf(value[key]))) entries.push([pair(key), pair(value[key])]);\n          }\n          return index;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.DATE:\n        return as([TYPE, value.toISOString()], value);\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.REGEXP:\n        {\n          const {\n            source,\n            flags\n          } = value;\n          return as([TYPE, {\n            source,\n            flags\n          }], value);\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.MAP:\n        {\n          const entries = [];\n          const index = as([TYPE, entries], value);\n          for (const [key, entry] of value) {\n            if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry)))) entries.push([pair(key), pair(entry)]);\n          }\n          return index;\n        }\n      case _types_js__WEBPACK_IMPORTED_MODULE_0__.SET:\n        {\n          const entries = [];\n          const index = as([TYPE, entries], value);\n          for (const entry of value) {\n            if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));\n          }\n          return index;\n        }\n    }\n    const {\n      message\n    } = value;\n    return as([TYPE, {\n      name: type,\n      message\n    }], value);\n  };\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\nconst serialize = (value, {\n  json,\n  lossy\n} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map(), _)(value), _;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL3NlcmlhbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUtvQjtBQUVwQixNQUFNVSxLQUFLLEdBQUcsRUFBRTtBQUVoQixNQUFNO0VBQUNDO0FBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQixNQUFNO0VBQUNDO0FBQUksQ0FBQyxHQUFHQyxNQUFNO0FBRXJCLE1BQU1DLE1BQU0sR0FBR0MsS0FBSyxJQUFJO0VBQ3RCLE1BQU1DLElBQUksR0FBRyxPQUFPRCxLQUFLO0VBQ3pCLElBQUlDLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQ0QsS0FBSyxFQUM3QixPQUFPLENBQUNkLGdEQUFTLEVBQUVlLElBQUksQ0FBQztFQUUxQixNQUFNQyxRQUFRLEdBQUdOLFFBQVEsQ0FBQ08sSUFBSSxDQUFDSCxLQUFLLENBQUMsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNsRCxRQUFRRixRQUFRO0lBQ2QsS0FBSyxPQUFPO01BQ1YsT0FBTyxDQUFDZiw0Q0FBSyxFQUFFUSxLQUFLLENBQUM7SUFDdkIsS0FBSyxRQUFRO01BQ1gsT0FBTyxDQUFDUCw2Q0FBTSxFQUFFTyxLQUFLLENBQUM7SUFDeEIsS0FBSyxNQUFNO01BQ1QsT0FBTyxDQUFDTiwyQ0FBSSxFQUFFTSxLQUFLLENBQUM7SUFDdEIsS0FBSyxRQUFRO01BQ1gsT0FBTyxDQUFDTCw2Q0FBTSxFQUFFSyxLQUFLLENBQUM7SUFDeEIsS0FBSyxLQUFLO01BQ1IsT0FBTyxDQUFDSiwwQ0FBRyxFQUFFSSxLQUFLLENBQUM7SUFDckIsS0FBSyxLQUFLO01BQ1IsT0FBTyxDQUFDSCwwQ0FBRyxFQUFFRyxLQUFLLENBQUM7SUFDckIsS0FBSyxVQUFVO01BQ2IsT0FBTyxDQUFDUiw0Q0FBSyxFQUFFZSxRQUFRLENBQUM7RUFDNUI7RUFFQSxJQUFJQSxRQUFRLENBQUNHLFFBQVEsQ0FBQyxPQUFPLENBQUMs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T0FBT2EsRUFBRSxDQUFDLENBQUNOLElBQUksRUFBRTtNQUFDNEIsSUFBSSxFQUFFbEMsSUFBSTtNQUFFaUM7SUFBTyxDQUFDLENBQUMsRUFBRWxDLEtBQUssQ0FBQztFQUNqRCxDQUFDO0VBRUQsT0FBT2tCLElBQUk7QUFDYixDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1EsTUFBTWtCLFNBQVMsR0FBR0EsQ0FBQ3BDLEtBQUssRUFBRTtFQUFDVSxJQUFJO0VBQUUyQjtBQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSztFQUN2RCxNQUFNekIsQ0FBQyxHQUFHLEVBQUU7RUFDWixPQUFPSixVQUFVLENBQUMsRUFBRUUsSUFBSSxJQUFJMkIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDM0IsSUFBSSxFQUFFLElBQUk0QixHQUFHLENBQUQsQ0FBQyxFQUFFMUIsQ0FBQyxDQUFDLENBQUNaLEtBQUssQ0FBQyxFQUFFWSxDQUFDO0FBQ25FLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcWHhHb29cXHBlcnNvbmFsLXNpdGVcXG5vZGVfbW9kdWxlc1xcQHVuZ2FwXFxzdHJ1Y3R1cmVkLWNsb25lXFxlc21cXHNlcmlhbGl6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBWT0lELCBQUklNSVRJVkUsXG4gIEFSUkFZLCBPQkpFQ1QsXG4gIERBVEUsIFJFR0VYUCwgTUFQLCBTRVQsXG4gIEVSUk9SLCBCSUdJTlRcbn0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbmNvbnN0IEVNUFRZID0gJyc7XG5cbmNvbnN0IHt0b1N0cmluZ30gPSB7fTtcbmNvbnN0IHtrZXlzfSA9IE9iamVjdDtcblxuY29uc3QgdHlwZU9mID0gdmFsdWUgPT4ge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSAhPT0gJ29iamVjdCcgfHwgIXZhbHVlKVxuICAgIHJldHVybiBbUFJJTUlUSVZFLCB0eXBlXTtcblxuICBjb25zdCBhc1N0cmluZyA9IHRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKTtcbiAgc3dpdGNoIChhc1N0cmluZykge1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBbQVJSQVksIEVNUFRZXTtcbiAgICBjYXNlICdPYmplY3QnOlxuICAgICAgcmV0dXJuIFtPQkpFQ1QsIEVNUFRZXTtcbiAgICBjYXNlICdEYXRlJzpcbiAgICAgIHJldHVybiBbREFURSwgRU1QVFldO1xuICAgIGNhc2UgJ1JlZ0V4cCc6XG4gICAgICByZXR1cm4gW1JFR0VYUCwgRU1QVFldO1xuICAgIGNhc2UgJ01hcCc6XG4gICAgICByZXR1cm4gW01BUCwgRU1QVFldO1xuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gW1NFVCwgRU1QVFldO1xuICAgIGNhc2UgJ0RhdGFWaWV3JzpcbiAgICAgIHJldHVybiBbQVJSQVksIGFzU3RyaW5nXTtcbiAgfVxuXG4gIGlmIChhc1N0cmluZy5pbmNsdWRlcygnQXJyYXknKSlcbiAgICByZXR1cm4gW0FSUkFZLCBhc1N0cmluZ107XG5cbiAgaWYgKGFzU3RyaW5nLmluY2x1ZGVzKCdFcnJvcicpKVxuICAgIHJldHVybiBbRVJST1IsIGFzU3RyaW5nXTtcblxuICByZXR1cm4gW09CSkVDVCwgYXNTdHJpbmddO1xufTtcblxuY29uc3Qgc2hvdWxkU2tpcCA9IChbVFlQRSwgdHlwZV0pID0+IChcbiAgVFlQRSA9PT0gUFJJTUlUSVZFICYmXG4gICh0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGUgPT09ICdzeW1ib2wnKVxuKTtcblxuY29uc3Qgc2VyaWFsaXplciA9IChzdHJpY3QsIGpzb24sICQsIF8pID0+IHtcblxuICBjb25zdCBhcyA9IChvdXQsIHZhbHVlKSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBfLnB1c2gob3V0KSAtIDE7XG4gICAgJC5zZXQodmFsdWUsIGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH07XG5cbiAgY29uc3QgcGFpciA9IHZhbHVlID0+IHtcbiAgICBpZiAoJC5oYXModmFsdWUpKVxuICAgICAgcmV0dXJuICQuZ2V0KHZhbHVlKTtcblxuICAgIGxldCBbVFlQRSwgdHlwZV0gPSB0eXBlT2YodmFsdWUpO1xuICAgIHN3aXRjaCAoVFlQRSkge1xuICAgICAgY2FzZSBQUklNSVRJVkU6IHtcbiAgICAgICAgbGV0IGVudHJ5ID0gdmFsdWU7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAgICAgICBUWVBFID0gQklHSU5UO1xuICAgICAgICAgICAgZW50cnkgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAgICAgICBpZiAoc3RyaWN0KVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmFibGUgdG8gc2VyaWFsaXplICcgKyB0eXBlKTtcbiAgICAgICAgICAgIGVudHJ5ID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICByZXR1cm4gYXMoW1ZPSURdLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzKFtUWVBFLCBlbnRyeV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgQVJSQVk6IHtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICBsZXQgc3ByZWFkID0gdmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdEYXRhVmlldycpIHtcbiAgICAgICAgICAgIHNwcmVhZCA9IG5ldyBVaW50OEFycmF5KHZhbHVlLmJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdBcnJheUJ1ZmZlcicpIHtcbiAgICAgICAgICAgIHNwcmVhZCA9IG5ldyBVaW50OEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFzKFt0eXBlLCBbLi4uc3ByZWFkXV0sIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgICBjb25zdCBpbmRleCA9IGFzKFtUWVBFLCBhcnJdLCB2YWx1ZSk7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdmFsdWUpXG4gICAgICAgICAgYXJyLnB1c2gocGFpcihlbnRyeSkpO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnQmlnSW50JzpcbiAgICAgICAgICAgICAgcmV0dXJuIGFzKFt0eXBlLCB2YWx1ZS50b1N0cmluZygpXSwgdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnQm9vbGVhbic6XG4gICAgICAgICAgICBjYXNlICdOdW1iZXInOlxuICAgICAgICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGFzKFt0eXBlLCB2YWx1ZS52YWx1ZU9mKCldLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGpzb24gJiYgKCd0b0pTT04nIGluIHZhbHVlKSlcbiAgICAgICAgICByZXR1cm4gcGFpcih2YWx1ZS50b0pTT04oKSk7XG5cbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xuICAgICAgICBjb25zdCBpbmRleCA9IGFzKFtUWVBFLCBlbnRyaWVzXSwgdmFsdWUpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChzdHJpY3QgfHwgIXNob3VsZFNraXAodHlwZU9mKHZhbHVlW2tleV0pKSlcbiAgICAgICAgICAgIGVudHJpZXMucHVzaChbcGFpcihrZXkpLCBwYWlyKHZhbHVlW2tleV0pXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgICAgY2FzZSBEQVRFOlxuICAgICAgICByZXR1cm4gYXMoW1RZUEUsIHZhbHVlLnRvSVNPU3RyaW5nKCldLCB2YWx1ZSk7XG4gICAgICBjYXNlIFJFR0VYUDoge1xuICAgICAgICBjb25zdCB7c291cmNlLCBmbGFnc30gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGFzKFtUWVBFLCB7c291cmNlLCBmbGFnc31dLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBjYXNlIE1BUDoge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gW107XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYXMoW1RZUEUsIGVudHJpZXNdLCB2YWx1ZSk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHN0cmljdCB8fCAhKHNob3VsZFNraXAodHlwZU9mKGtleSkpIHx8IHNob3VsZFNraXAodHlwZU9mKGVudHJ5KSkpKVxuICAgICAgICAgICAgZW50cmllcy5wdXNoKFtwYWlyKGtleSksIHBhaXIoZW50cnkpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgICAgY2FzZSBTRVQ6IHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xuICAgICAgICBjb25zdCBpbmRleCA9IGFzKFtUWVBFLCBlbnRyaWVzXSwgdmFsdWUpO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHN0cmljdCB8fCAhc2hvdWxkU2tpcCh0eXBlT2YoZW50cnkpKSlcbiAgICAgICAgICAgIGVudHJpZXMucHVzaChwYWlyKGVudHJ5KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHttZXNzYWdlfSA9IHZhbHVlO1xuICAgIHJldHVybiBhcyhbVFlQRSwge25hbWU6IHR5cGUsIG1lc3NhZ2V9XSwgdmFsdWUpO1xuICB9O1xuXG4gIHJldHVybiBwYWlyO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7QXJyYXk8c3RyaW5nLGFueT59IFJlY29yZCBhIHR5cGUgcmVwcmVzZW50YXRpb25cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VyaWFsaXplZCBSZWNvcmRzLlxuICogQHBhcmFtIHthbnl9IHZhbHVlIGEgc2VyaWFsaXphYmxlIHZhbHVlLlxuICogQHBhcmFtIHt7anNvbj86IGJvb2xlYW4sIGxvc3N5PzogYm9vbGVhbn0/fSBvcHRpb25zIGFuIG9iamVjdCB3aXRoIGEgYGxvc3N5YCBvciBganNvbmAgcHJvcGVydHkgdGhhdCxcbiAqICBpZiBgdHJ1ZWAsIHdpbGwgbm90IHRocm93IGVycm9ycyBvbiBpbmNvbXBhdGlibGUgdHlwZXMsIGFuZCBiZWhhdmUgbW9yZVxuICogIGxpa2UgSlNPTiBzdHJpbmdpZnkgd291bGQgYmVoYXZlLiBTeW1ib2wgYW5kIEZ1bmN0aW9uIHdpbGwgYmUgZGlzY2FyZGVkLlxuICogQHJldHVybnMge1JlY29yZFtdfVxuICovXG4gZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZSA9ICh2YWx1ZSwge2pzb24sIGxvc3N5fSA9IHt9KSA9PiB7XG4gIGNvbnN0IF8gPSBbXTtcbiAgcmV0dXJuIHNlcmlhbGl6ZXIoIShqc29uIHx8IGxvc3N5KSwgISFqc29uLCBuZXcgTWFwLCBfKSh2YWx1ZSksIF87XG59O1xuIl0sIm5hbWVzIjpbIlZPSUQiLCJQUklNSVRJVkUiLCJBUlJBWSIsIk9CSkVDVCIsIkRBVEUiLCJSRUdFWFAiLCJNQVAiLCJTRVQiLCJFUlJPUiIsIkJJR0lOVCIsIkVNUFRZIiwidG9TdHJpbmciLCJrZXlzIiwiT2JqZWN0IiwidHlwZU9mIiwidmFsdWUiLCJ0eXBlIiwiYXNTdHJpbmciLCJjYWxsIiwic2xpY2UiLCJpbmNsdWRlcyIsInNob3VsZFNraXAiLCJUWVBFIiwic2VyaWFsaXplciIsInN0cmljdCIsImpzb24iLCIkIiwiXyIsImFzIiwib3V0IiwiaW5kZXgiLCJwdXNoIiwic2V0IiwicGFpciIsImhhcyIsImdldCIsImVudHJ5IiwiVHlwZUVycm9yIiwic3ByZWFkIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImFyciIsInZhbHVlT2YiLCJ0b0pTT04iLCJlbnRyaWVzIiwia2V5IiwidG9JU09TdHJpbmciLCJzb3VyY2UiLCJmbGFncyIsIm1lc3NhZ2UiLCJuYW1lIiwic2VyaWFsaXplIiwibG9zc3kiLCJNYXAiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ungap/structured-clone/esm/serialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ungap/structured-clone/esm/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ungap/structured-clone/esm/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY: () => (/* binding */ ARRAY),\n/* harmony export */   BIGINT: () => (/* binding */ BIGINT),\n/* harmony export */   DATE: () => (/* binding */ DATE),\n/* harmony export */   ERROR: () => (/* binding */ ERROR),\n/* harmony export */   MAP: () => (/* binding */ MAP),\n/* harmony export */   OBJECT: () => (/* binding */ OBJECT),\n/* harmony export */   PRIMITIVE: () => (/* binding */ PRIMITIVE),\n/* harmony export */   REGEXP: () => (/* binding */ REGEXP),\n/* harmony export */   SET: () => (/* binding */ SET),\n/* harmony export */   VOID: () => (/* binding */ VOID)\n/* harmony export */ });\nconst VOID = -1;\nconst PRIMITIVE = 0;\nconst ARRAY = 1;\nconst OBJECT = 2;\nconst DATE = 3;\nconst REGEXP = 4;\nconst MAP = 5;\nconst SET = 6;\nconst ERROR = 7;\nconst BIGINT = 8;\n// export const SYMBOL = 9;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVuZ2FwL3N0cnVjdHVyZWQtY2xvbmUvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxJQUFJLEdBQVMsQ0FBQyxDQUFDO0FBQ3JCLE1BQU1DLFNBQVMsR0FBSSxDQUFDO0FBQ3BCLE1BQU1DLEtBQUssR0FBUSxDQUFDO0FBQ3BCLE1BQU1DLE1BQU0sR0FBTyxDQUFDO0FBQ3BCLE1BQU1DLElBQUksR0FBUyxDQUFDO0FBQ3BCLE1BQU1DLE1BQU0sR0FBTyxDQUFDO0FBQ3BCLE1BQU1DLEdBQUcsR0FBVSxDQUFDO0FBQ3BCLE1BQU1DLEdBQUcsR0FBVSxDQUFDO0FBQ3BCLE1BQU1DLEtBQUssR0FBUSxDQUFDO0FBQ3BCLE1BQU1DLE1BQU0sR0FBTyxDQUFDO0FBQzNCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFh4R29vXFxwZXJzb25hbC1zaXRlXFxub2RlX21vZHVsZXNcXEB1bmdhcFxcc3RydWN0dXJlZC1jbG9uZVxcZXNtXFx0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVk9JRCAgICAgICA9IC0xO1xuZXhwb3J0IGNvbnN0IFBSSU1JVElWRSAgPSAwO1xuZXhwb3J0IGNvbnN0IEFSUkFZICAgICAgPSAxO1xuZXhwb3J0IGNvbnN0IE9CSkVDVCAgICAgPSAyO1xuZXhwb3J0IGNvbnN0IERBVEUgICAgICAgPSAzO1xuZXhwb3J0IGNvbnN0IFJFR0VYUCAgICAgPSA0O1xuZXhwb3J0IGNvbnN0IE1BUCAgICAgICAgPSA1O1xuZXhwb3J0IGNvbnN0IFNFVCAgICAgICAgPSA2O1xuZXhwb3J0IGNvbnN0IEVSUk9SICAgICAgPSA3O1xuZXhwb3J0IGNvbnN0IEJJR0lOVCAgICAgPSA4O1xuLy8gZXhwb3J0IGNvbnN0IFNZTUJPTCA9IDk7XG4iXSwibmFtZXMiOlsiVk9JRCIsIlBSSU1JVElWRSIsIkFSUkFZIiwiT0JKRUNUIiwiREFURSIsIlJFR0VYUCIsIk1BUCIsIlNFVCIsIkVSUk9SIiwiQklHSU5UIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ungap/structured-clone/esm/types.js\n");

/***/ })

};
;